@{
    ViewData["Title"] = "Customer Emails";
    Layout = "";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.13.8/css/jquery.dataTables.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div class="d-flex align-items-center">
            <h2 class="me-3">Customer Contact Forms</h2>
            <span class="badge bg-info" id="badgeNew" style="display:none">New</span>
            <span class="badge bg-secondary ms-2" id="badgeCount">0 emails</span>
        </div>

        <div class="d-flex align-items-center">
            <button class="btn btn-outline-primary me-2" onclick="refreshData()">
                <i class="fas fa-sync-alt" id="refreshIcon"></i> Refresh
            </button>
            <button class="btn btn-success me-2" onclick="triggerSync()">
                <i class="fas fa-download"></i> Sync Now
            </button>
            <button class="btn btn-info" onclick="showStats()">
                <i class="fas fa-chart-bar"></i> Stats
            </button>
        </div>
    </div>

    <!-- Stats Panel -->
    <div class="row mb-3" id="statsPanel" style="display: none;">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-primary" id="statTotal">0</h4>
                                <small class="text-muted">Total Emails</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-success" id="statContactForms">0</h4>
                                <small class="text-muted">Contact Forms</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-warning" id="statUnread">0</h4>
                                <small class="text-muted">Unread</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h4 class="text-info" id="statSyncTime">--:--</h4>
                                <small class="text-muted">Last Sync</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <div class="row">
            <div class="col-md-8">
                <input id="searchBox" class="form-control" placeholder="Search name, email, company, phone..." />
            </div>
            <div class="col-md-4">
                <select id="filterStatus" class="form-select">
                    <option value="">All Status</option>
                    <option value="unread">Unread Only</option>
                    <option value="attachments">With Attachments</option>
                    <option value="contact-forms">Contact Forms Only</option>
                </select>
            </div>
        </div>
    </div>

    <table id="emailsTable" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Contact Details</th>
                <th>Company & GST</th>
                <th>Phone</th>
                <th>Received</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
    </table>

    <!-- Detail offcanvas -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="detailPane" aria-labelledby="detailPaneLabel" style="width: 700px;">
        <div class="offcanvas-header">
            <h5 id="detailPaneLabel">Contact Form Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <div id="emailDetail"></div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-sm modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 mb-0">Syncing emails...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.14/signalr.min.js"></script>

<script>
    (function () {
        let table;
        let statsVisible = false;

        // SignalR connection for live updates
        const connection = new signalR.HubConnectionBuilder().withUrl("/hubs/email").build();

        connection.on("NewEmails", function (newEmails) {
            const badge = document.getElementById('badgeNew');
            badge.style.display = 'inline-block';
            setTimeout(() => { badge.style.display = 'none'; }, 3000);

            if (table) {
                table.ajax.reload(null, false);
                updateEmailCount();
            }

            // Show notification
            showNotification(`${newEmails.length} new email(s) received`, 'success');
        });

        connection.start().catch(function (err) {
            console.error('SignalR connection error:', err);
            showNotification('Real-time updates disconnected', 'warning');
        });

        $(document).ready(function () {
            initializeDataTable();
            updateEmailCount();

            // Setup event handlers
            $('#searchBox').on('input', function () {
                table.search(this.value).draw();
            });

            $('#filterStatus').on('change', function () {
                applyStatusFilter(this.value);
            });
        });

        function initializeDataTable() {
            table = $('#emailsTable').DataTable({
                ajax: {
                    url: '/api/emails',
                    dataSrc: function (json) {
                        console.log('DataTables received:', json);
                        updateEmailCount(json.count || 0);
                        return json.data || json;
                    },
                    error: function (xhr, error, code) {
                        console.error('DataTables Ajax error:', error, code);
                        console.error('Response:', xhr.responseText);
                        showNotification('Error loading emails', 'danger');
                    }
                },
                deferRender: true,
                pageLength: 25,
                order: [[3, 'desc']], // Sort by received date desc
                columns: [
                    {
                        data: null,
                        title: 'Contact Details',
                        render: function (row) {
                            const name = getProperty(row, ['fromName', 'FromName']) || 'Unknown';
                            const email = getProperty(row, ['fromEmail', 'FromEmail']) || '';
                            const isContactForm = getProperty(row, ['isContactForm', 'IsContactForm']) || false;

                            return `<div>
                                    <strong>${escapeHtml(name)}</strong>
                                    ${isContactForm ? '<span class="badge bg-primary ms-1">Contact Form</span>' : ''}
                                    <div class='text-muted small'>
                                        <i class="fas fa-envelope"></i> ${escapeHtml(email)}
                                    </div>
                                </div>`;
                        }
                    },
                    {
                        data: null,
                        title: 'Company & GST',
                        render: function (row) {
                            const company = getProperty(row, ['company', 'Company']) || '-';
                            const gst = getProperty(row, ['gst', 'GST']) || '';

                            return `<div>
                                    <div><strong>${escapeHtml(company)}</strong></div>
                                    ${gst ? `<div class='text-muted small'>GST: ${escapeHtml(gst)}</div>` : ''}
                                </div>`;
                        }
                    },
                    {
                        data: null,
                        title: 'Phone',
                        render: function (row) {
                            const phone = getProperty(row, ['phone', 'Phone']) || '-';
                            return phone !== '-' ?
                                `<a href="tel:${escapeHtml(phone)}" class="text-decoration-none">${escapeHtml(phone)}</a>` :
                                '-';
                        }
                    },
                    {
                        data: null,
                        title: 'Received',
                        render: function (row) {
                            const received = getProperty(row, [
                                'receivedLocal', 'ReceivedLocal',
                                'received', 'Received',
                                'receivedUtc', 'ReceivedUtc'
                            ]) || 'Unknown';
                            return `<small>${escapeHtml(received)}</small>`;
                        }
                    },
                    {
                        data: null,
                        title: 'Status',
                        render: function (row) {
                            const unread = getProperty(row, ['unread', 'Unread']) || false;
                            const hasAttachments = getProperty(row, ['hasAttachments', 'HasAttachments']) || false;

                            let badges = '';
                            if (unread) {
                                badges += '<span class="badge bg-warning text-dark me-1">New</span>';
                            }
                            if (hasAttachments) {
                                badges += '<span class="badge bg-info text-dark me-1"><i class="fas fa-paperclip"></i></span>';
                            }

                            return badges || '<span class="text-muted">Read</span>';
                        }
                    },
                    {
                        data: null,
                        title: 'Actions',
                        orderable: false,
                        render: function (row) {
                            const id = getProperty(row, ['id', 'Id']) || '';
                            const email = getProperty(row, ['fromEmail', 'FromEmail']) || '';
                            const phone = getProperty(row, ['phone', 'Phone']) || '';

                            let actions = `<button class='btn btn-sm btn-primary me-1' onclick='openDetail("${id}")'>
                                    <i class="fas fa-eye"></i> View
                                </button>`;

                            if (email && email !== 'contact@website') {
                                actions += `<a href="mailto:${email}" class="btn btn-sm btn-outline-secondary me-1" title="Send Email">
                                        <i class="fas fa-envelope"></i>
                                    </a>`;
                            }

                            if (phone && phone !== '-') {
                                actions += `<a href="tel:${phone}" class="btn btn-sm btn-outline-secondary" title="Call">
                                        <i class="fas fa-phone"></i>
                                    </a>`;
                            }

                            return actions;
                        }
                    }
                ]
            });
        }

        // Global functions
        window.refreshData = function () {
            const icon = document.getElementById('refreshIcon');
            icon.classList.add('fa-spin');

            if (table) {
                table.ajax.reload(function () {
                    icon.classList.remove('fa-spin');
                    showNotification('Data refreshed', 'success');
                }, false);
            }
        };

        window.triggerSync = function () {
            const loadingModal = new bootstrap.Modal('#loadingModal');
            loadingModal.show();

            fetch('/api/emails/sync', { method: 'POST' })
                .then(response => response.json())
                .then(result => {
                    loadingModal.hide();
                    if (result.success) {
                        showNotification('Sync completed successfully', 'success');
                        refreshData();
                    } else {
                        showNotification('Sync failed: ' + result.error, 'danger');
                    }
                })
                .catch(error => {
                    loadingModal.hide();
                    console.error('Sync error:', error);
                    showNotification('Sync failed', 'danger');
                });
        };

        window.showStats = function () {
            statsVisible = !statsVisible;
            const panel = document.getElementById('statsPanel');

            if (statsVisible) {
                panel.style.display = 'block';
                loadStats();
            } else {
                panel.style.display = 'none';
            }
        };

        window.openDetail = function (id) {
            console.log('Opening detail for email ID:', id);

            fetch(`/api/emails/${encodeURIComponent(id)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(emailData => {
                    console.log('Email detail received:', emailData);
                    showDetail(emailData);
                })
                .catch(error => {
                    console.error('Error fetching email detail:', error);
                    showNotification('Error loading email details: ' + error.message, 'danger');
                });
        };

        function showDetail(emailData) {
            const detailElement = document.getElementById('emailDetail');

            const name = getProperty(emailData, ['fromName', 'FromName']) || 'Unknown';
            const email = getProperty(emailData, ['fromEmail', 'FromEmail']) || '';
            const phone = getProperty(emailData, ['phone', 'Phone']) || '-';
            const company = getProperty(emailData, ['company', 'Company']) || '-';
            const gst = getProperty(emailData, ['gst', 'GST']) || '-';
            const message = getProperty(emailData, ['message', 'Message']) ||
                getProperty(emailData, ['textBody', 'TextBody']) || '';

            const attachments = (getProperty(emailData, ['attachments', 'Attachments']) || []).map(attachment =>
                `<li><a href='/api/emails/${encodeURIComponent(getProperty(emailData, ['id', 'Id']))}/attachment?fileName=${encodeURIComponent(getProperty(attachment, ['fileName', 'FileName']))}' target="_blank">
                        <i class="fas fa-paperclip"></i> ${escapeHtml(getProperty(attachment, ['fileName', 'FileName']))}
                        ${getProperty(attachment, ['sizeBytes', 'SizeBytes']) ? ` (${formatSize(getProperty(attachment, ['sizeBytes', 'SizeBytes']))})` : ''}
                    </a></li>`
            ).join('');

            detailElement.innerHTML = `
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0"><i class="fas fa-envelope"></i> Contact Form Submission</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6 class="text-primary"><i class="fas fa-user"></i> Contact Information</h6>
                                    <table class="table table-sm">
                                        <tr><td><strong>Name:</strong></td><td>${escapeHtml(name)}</td></tr>
                                        <tr><td><strong>Email:</strong></td><td><a href="mailto:${escapeHtml(email)}">${escapeHtml(email)}</a></td></tr>
                                        <tr><td><strong>Phone:</strong></td><td>${phone !== '-' ? `<a href="tel:${escapeHtml(phone)}">${escapeHtml(phone)}</a>` : '-'}</td></tr>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-primary"><i class="fas fa-building"></i> Business Information</h6>
                                    <table class="table table-sm">
                                        <tr><td><strong>Company:</strong></td><td>${escapeHtml(company)}</td></tr>
                                        <tr><td><strong>GST Number:</strong></td><td>${escapeHtml(gst)}</td></tr>
                                        <tr><td><strong>Received:</strong></td><td>${escapeHtml(getProperty(emailData, ['receivedLocal', 'ReceivedLocal']))}</td></tr>
                                    </table>
                                </div>
                            </div>

                            ${message ? `
                            <div class="mt-3">
                                <h6 class="text-primary"><i class="fas fa-comment"></i> Message</h6>
                                <div class="border p-3 bg-light rounded">
                                    <p class="mb-0" style="white-space: pre-wrap;">${escapeHtml(message)}</p>
                                </div>
                            </div>
                            ` : ''}

                            ${attachments ? `
                            <div class="mt-3">
                                <h6 class="text-primary"><i class="fas fa-paperclip"></i> Attachments</h6>
                                <ul class="list-unstyled">${attachments}</ul>
                            </div>
                            ` : ''}

                            <div class="mt-3">
                                <h6 class="text-primary"><i class="fas fa-bolt"></i> Quick Actions</h6>
                                <a href="mailto:${escapeHtml(email)}" class="btn btn-primary me-2">
                                    <i class="fas fa-envelope"></i> Send Email
                                </a>
                                ${phone !== '-' ? `<a href="tel:${escapeHtml(phone)}" class="btn btn-success">
                                    <i class="fas fa-phone"></i> Call Now
                                </a>` : ''}
                            </div>
                        </div>
                    </div>
                `;

            const offcanvas = new bootstrap.Offcanvas('#detailPane');
            offcanvas.show();
        }

        function loadStats() {
            fetch('/api/emails/stats')
                .then(response => response.json())
                .then(stats => {
                    document.getElementById('statTotal').textContent = stats.totalEmails || 0;
                    document.getElementById('statContactForms').textContent = stats.contactForms || 0;
                    document.getElementById('statUnread').textContent = stats.unreadCount || 0;
                    document.getElementById('statSyncTime').textContent = new Date().toLocaleTimeString();
                })
                .catch(error => {
                    console.error('Error loading stats:', error);
                });
        }

        function updateEmailCount(count) {
            if (count !== undefined) {
                document.getElementById('badgeCount').textContent = `${count} emails`;
            }
        }

        function applyStatusFilter(filterValue) {
            if (!table) return;

            switch (filterValue) {
                case 'unread':
                    table.column(4).search('New').draw();
                    break;
                case 'attachments':
                    table.column(4).search('paperclip').draw();
                    break;
                case 'contact-forms':
                    table.column(0).search('Contact Form').draw();
                    break;
                default:
                    table.column(4).search('').draw();
                    table.column(0).search('').draw();
                    break;
            }
        }

        function showNotification(message, type = 'info') {
            // Create toast notification
            const toastHtml = `
                    <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                        </div>
                    </div>
                `;

            // Add to toast container (create if doesn't exist)
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            const toastElement = toastContainer.lastElementChild;
            const toast = new bootstrap.Toast(toastElement);
            toast.show();

            // Remove after hiding
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Helper function to get property with multiple possible names
        function getProperty(obj, possibleNames) {
            for (let name of possibleNames) {
                if (obj && obj.hasOwnProperty(name)) {
                    return obj[name];
                }
            }
            return null;
        }

        // Utility functions
        function escapeHtml(unsafe) {
            return (unsafe || '').replace(/[&<>"']/g, function (match) {
                const escapeMap = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                };
                return escapeMap[match];
            });
        }

        function formatSize(bytes) {
            if (!bytes) return '';
            const kb = bytes / 1024;
            if (kb < 1024) return kb.toFixed(1) + " KB";
            return (kb / 1024).toFixed(1) + " MB";
        }
    })();
</script>